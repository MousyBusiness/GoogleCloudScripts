#!/usr/bin/env bash

DESCRIPTION=""
roles=()

while [[ -n "$1" ]]; do
  case $1 in
  --name)
    NAME="$2"
    shift
    ;;
  --project)
    PROJECT_ID="$2"
    shift
    ;;
  --key)
    KEY="true"
    ;;
  --description)
    DESCRIPTION="$2"
    shift
    ;;
  --pubsub)
    roles=("${roles[@]}" "roles/pubsub.publisher")
    ;;
  --compute)
    roles=("${roles[@]}" "roles/compute.viewer" "roles/storage.objectViewer" "roles/logging.logWriter" "roles/monitoring.metricWriter")
    ;;
  --datastore)
    roles=("${roles[@]}" "roles/datastore.user")
    ;;
  --bigquery)
    roles=("${roles[@]}" "roles/bigquery.dataViewer" "roles/bigquery.user")
    ;;
  --redis)
    roles=("${roles[@]}" "roles/redis.editor")
    ;;
  *)
    echo "unknown parameter"
    exit 1
    ;;
  esac
  shift
done

[[ -z "$NAME" ]] && echo "error: require name" && exit 1
[[ -z "$roles" ]] && echo "error: invalid role" && exit 1
[[ -z "$PROJECT_ID" ]] && echo "error: require project ID" && exit 1

# check project id exists
if ! gcloud projects list | awk '{ print $1 }' | grep -Eq "^${PROJECT_ID}$"; then
  echo "error: invalid project ID" && exit 1
fi

gcloud iam service-accounts create "$NAME" \
  --description="$DESCRIPTION" \
  --display-name="$NAME"

for role in "${roles[@]}"; do
  echo "adding role: $role"
  gcloud projects add-iam-policy-binding "$PROJECT_ID" \
    --member="serviceAccount:${NAME}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --role="$role"
done

if [[ "$KEY" == "true" ]]; then
  gcloud iam service-accounts keys create $(dirname $0)/../key.json \
    --iam-account "${NAME}@${PROJECT_ID}.iam.gserviceaccount.com"
fi
