#!/usr/bin/env bash

help() {
  echo '
  Usage: ./deploy-dm --project myproject --name server-farm --config ../resources/deployment.yaml

  --project         ID of the project to deploy to
  --name            Name of deployment
  --config          Deployment manager configuration
  --help            Show help
  '
  exit 1
}

while [[ -n "$1" ]]; do
  case "$1" in
  --help)
    help
    ;;
  --project)
    PROJECT_ID="$2"
    shift
    ;;
  --name)
    NAME="$2"
    shift
    ;;
  --config)
    CONFIG="$2"
    shift
    ;;
  --delete)
    DELETE=true
    ;;
  --preview)
    PREVIEW=true
    ;;
  --rebuild)
    REBUILD=true
    ;;
  --properties)
    PROPERTIES="--properties $2"
    shift
    ;;
  esac
  shift
done

[[ -z "$PROJECT_ID" ]] && echo "require --project" && exit 1
[[ -z "$NAME" ]] && echo "require --name" && exit 1

if [[ "$DELETE" == "true" ]] || [[ "$REBUILD" == "true" ]]; then
  gcloud deployment-manager deployments delete $NAME --quiet

  [[ "$DELETE" == "true" ]] && echo "deleted" && exit 0
fi

[[ -z "$CONFIG" ]] && echo "require --config" && exit 1

if echo "$CONFIG" | grep -q -E "jinja|py$"; then
  TEMPLATE_FLAG="--template"
else
  TEMPLATE_FLAG="--config"
fi

set -e

# check if deployment exists or not
if ! gcloud deployment-manager --project $PROJECT_ID deployments describe $NAME &>/dev/null; then
  # deployment doesnt exist, create new
  echo "creating new deployment '$NAME'"
  cmd="gcloud deployment-manager --project $PROJECT_ID deployments create $NAME $TEMPLATE_FLAG $CONFIG $PROPERTIES"
  if [[ "$PREVIEW" == "true" ]]; then
    echo "running preview"
    cmd="$(echo $cmd) --preview"
  fi

  eval $cmd

else
  # deployment already exists, update
  echo "updating $NAME"
  cmd="gcloud deployment-manager --project $PROJECT_ID deployments update $NAME $TEMPLATE_FLAG $CONFIG $PROPERTIES"
  if [[ "$PREVIEW" == "true" ]]; then
    echo "running preview"
    cmd="$(echo $cmd) --preview"
  fi

  eval $cmd

fi

echo "success"
